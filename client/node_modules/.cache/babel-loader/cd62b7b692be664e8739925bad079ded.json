{"ast":null,"code":"import _slicedToArray from \"C:/Users/adoud/Desktop/hotel_mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput(_ref) {\n  var _ref$acceptRegex = _ref.acceptRegex,\n    acceptRegex = _ref$acceptRegex === void 0 ? /[\\d]/gi : _ref$acceptRegex,\n    disabled = _ref.disabled,\n    disableMaskedInput = _ref.disableMaskedInput,\n    ignoreInvalidInputs = _ref.ignoreInvalidInputs,\n    inputFormat = _ref.inputFormat,\n    inputProps = _ref.inputProps,\n    label = _ref.label,\n    mask = _ref.mask,\n    onChange = _ref.onChange,\n    rawValue = _ref.rawValue,\n    readOnly = _ref.readOnly,\n    rifmFormatter = _ref.rifmFormatter,\n    TextFieldProps = _ref.TextFieldProps,\n    validationError = _ref.validationError;\n  var utils = useUtils();\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isFocused = _React$useState2[0],\n    setIsFocused = _React$useState2[1];\n  var formatHelperText = utils.getFormatHelperText(inputFormat);\n  var shouldUseMaskedInput = React.useMemo(function () {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  var formatter = React.useMemo(function () {\n    return shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : function (st) {\n      return st;\n    };\n  }, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs unctrolled `rawValue`\n\n  var currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  var _React$useState3 = React.useState(currentInputValue),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    innerInputValue = _React$useState4[0],\n    setInnerInputValue = _React$useState4[1];\n  var previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(function () {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  var notTyping = !isFocused;\n  var valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n  var handleChange = function handleChange(text) {\n    var finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    var date = finalString === null ? null : utils.parse(finalString, inputFormat);\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n    onChange(date, finalString || undefined);\n  };\n  var rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  var inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: function onChange(event) {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label: label,\n    disabled: disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled: disabled,\n      placeholder: formatHelperText,\n      readOnly: readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(function () {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(function () {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;","map":{"version":3,"names":["_extends","React","useRifm","useUtils","createDelegatedEventHandler","maskedDateFormatter","getDisplayDate","checkMaskIsValidForCurrentFormat","useMaskedInput","acceptRegex","disabled","disableMaskedInput","ignoreInvalidInputs","inputFormat","inputProps","label","mask","onChange","rawValue","readOnly","rifmFormatter","TextFieldProps","validationError","utils","useState","isFocused","setIsFocused","formatHelperText","getFormatHelperText","shouldUseMaskedInput","useMemo","formatter","st","currentInputValue","innerInputValue","setInnerInputValue","previousInputValueRef","useRef","useEffect","current","notTyping","valueChanged","isValid","handleChange","text","finalString","date","parse","undefined","rifmProps","value","format","inputStateArgs","event","currentTarget","error","placeholder","type","onFocus","onBlur"],"sources":["C:/Users/adoud/Desktop/hotel_mern/client/node_modules/@material-ui/lab/internal/pickers/hooks/useMaskedInput.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) {\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs unctrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;"],"mappings":"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"},"metadata":{},"sourceType":"module"}