{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@material-ui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nexport default function useMediaQuery(queryInput) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: {},\n    theme\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, options);\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n  return match;\n}","map":{"version":3,"names":["_extends","React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQuery","queryInput","options","theme","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","match","setMatch","useState","matches","active","undefined","queryList","updateMatch","addListener","removeListener","useDebugValue"],"sources":["C:/Users/adoud/Desktop/hotel_mern/client/node_modules/@material-ui/core/useMediaQuery/useMediaQuery.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@material-ui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: {},\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, options);\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,EAAEC,sBAAsB,IAAIC,QAAQ,QAAQ,qBAAqB;AACvF,OAAOC,iBAAiB,MAAM,4BAA4B;AAC1D,eAAe,SAASC,aAAa,CAACC,UAAU,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC5D,MAAMC,KAAK,GAAGL,QAAQ,EAAE;EACxB,MAAMM,KAAK,GAAGR,aAAa,CAAC;IAC1BS,IAAI,EAAE,kBAAkB;IACxBD,KAAK,EAAE,CAAC,CAAC;IACTD;EACF,CAAC,CAAC;EAEF,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,OAAOP,UAAU,KAAK,UAAU,IAAIE,KAAK,KAAK,IAAI,EAAE;MACtDM,OAAO,CAACC,KAAK,CAAC,CAAC,wDAAwD,EAAE,8DAA8D,EAAE,0DAA0D,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClN;EACF;EAEA,IAAIC,KAAK,GAAG,OAAOX,UAAU,KAAK,UAAU,GAAGA,UAAU,CAACE,KAAK,CAAC,GAAGF,UAAU;EAC7EW,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;EAC3C;EACA;EACA;;EAEA,MAAMC,iBAAiB,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,UAAU,KAAK,WAAW;EAEnG,MAAM;IACJC,cAAc,GAAG,KAAK;IACtBD,UAAU,GAAGF,iBAAiB,GAAGC,MAAM,CAACC,UAAU,GAAG,IAAI;IACzDE,KAAK,GAAG,KAAK;IACbC,aAAa,GAAG;EAClB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,EAAEU,KAAK,EAAEF,OAAO,CAAC;EAEhC,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,KAAK,CAAC2B,QAAQ,CAAC,MAAM;IAC7C,IAAIJ,KAAK,IAAIJ,iBAAiB,EAAE;MAC9B,OAAOE,UAAU,CAACJ,KAAK,CAAC,CAACW,OAAO;IAClC;IAEA,IAAIJ,aAAa,EAAE;MACjB,OAAOA,aAAa,CAACP,KAAK,CAAC,CAACW,OAAO;IACrC,CAAC,CAAC;IACF;;IAGA,OAAON,cAAc;EACvB,CAAC,CAAC;EACFlB,iBAAiB,CAAC,MAAM;IACtB,IAAIyB,MAAM,GAAG,IAAI;IAEjB,IAAI,CAACV,iBAAiB,EAAE;MACtB,OAAOW,SAAS;IAClB;IAEA,MAAMC,SAAS,GAAGV,UAAU,CAACJ,KAAK,CAAC;IAEnC,MAAMe,WAAW,GAAG,MAAM;MACxB;MACA;MACA;MACA,IAAIH,MAAM,EAAE;QACVH,QAAQ,CAACK,SAAS,CAACH,OAAO,CAAC;MAC7B;IACF,CAAC;IAEDI,WAAW,EAAE;IACbD,SAAS,CAACE,WAAW,CAACD,WAAW,CAAC;IAClC,OAAO,MAAM;MACXH,MAAM,GAAG,KAAK;MACdE,SAAS,CAACG,cAAc,CAACF,WAAW,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,CAACf,KAAK,EAAEI,UAAU,EAAEF,iBAAiB,CAAC,CAAC;EAE1C,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC;IACAb,KAAK,CAACmC,aAAa,CAAC;MAClBlB,KAAK;MACLQ;IACF,CAAC,CAAC;EACJ;EAEA,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module"}