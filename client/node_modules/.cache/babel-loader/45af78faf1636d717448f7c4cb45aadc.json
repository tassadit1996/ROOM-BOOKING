{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput(_ref) {\n  let {\n    acceptRegex = /[\\d]/gi,\n    disabled,\n    disableMaskedInput,\n    ignoreInvalidInputs,\n    inputFormat,\n    inputProps,\n    label,\n    mask,\n    onChange,\n    rawValue,\n    readOnly,\n    rifmFormatter,\n    TextFieldProps,\n    validationError\n  } = _ref;\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs unctrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n    onChange(date, finalString || undefined);\n  };\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;","map":{"version":3,"names":["_extends","React","useRifm","useUtils","createDelegatedEventHandler","maskedDateFormatter","getDisplayDate","checkMaskIsValidForCurrentFormat","useMaskedInput","acceptRegex","disabled","disableMaskedInput","ignoreInvalidInputs","inputFormat","inputProps","label","mask","onChange","rawValue","readOnly","rifmFormatter","TextFieldProps","validationError","utils","isFocused","setIsFocused","useState","formatHelperText","getFormatHelperText","shouldUseMaskedInput","useMemo","formatter","st","currentInputValue","innerInputValue","setInnerInputValue","previousInputValueRef","useRef","useEffect","current","notTyping","valueChanged","isValid","handleChange","text","finalString","date","parse","undefined","rifmProps","value","format","inputStateArgs","event","currentTarget","error","placeholder","type","onFocus","onBlur"],"sources":["C:/Users/adoud/Desktop/hotel_mern/client/node_modules/@material-ui/lab/internal/pickers/hooks/useMaskedInput.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useRifm } from 'rifm';\nimport { useUtils } from './useUtils';\nimport { createDelegatedEventHandler } from '../utils';\nimport { maskedDateFormatter, getDisplayDate, checkMaskIsValidForCurrentFormat } from '../text-field-helper';\nexport function useMaskedInput({\n  acceptRegex = /[\\d]/gi,\n  disabled,\n  disableMaskedInput,\n  ignoreInvalidInputs,\n  inputFormat,\n  inputProps,\n  label,\n  mask,\n  onChange,\n  rawValue,\n  readOnly,\n  rifmFormatter,\n  TextFieldProps,\n  validationError\n}) {\n  const utils = useUtils();\n  const [isFocused, setIsFocused] = React.useState(false);\n  const formatHelperText = utils.getFormatHelperText(inputFormat);\n  const shouldUseMaskedInput = React.useMemo(() => {\n    // formatting of dates is a quite slow thing, so do not make useless .format calls\n    if (!mask || disableMaskedInput) {\n      return false;\n    }\n\n    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);\n  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);\n  const formatter = React.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : st => st, [acceptRegex, mask, shouldUseMaskedInput]); // TODO: Implement with controlled vs unctrolled `rawValue`\n\n  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);\n  const [innerInputValue, setInnerInputValue] = React.useState(currentInputValue);\n  const previousInputValueRef = React.useRef(currentInputValue);\n  React.useEffect(() => {\n    previousInputValueRef.current = currentInputValue;\n  }, [currentInputValue]);\n  const notTyping = !isFocused;\n  const valueChanged = previousInputValueRef.current !== currentInputValue; // Update the input value only if the value changed outside of typing\n\n  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {\n    if (currentInputValue !== innerInputValue) {\n      setInnerInputValue(currentInputValue);\n    }\n  }\n\n  const handleChange = text => {\n    const finalString = text === '' || text === mask ? '' : text;\n    setInnerInputValue(finalString);\n    const date = finalString === null ? null : utils.parse(finalString, inputFormat);\n\n    if (ignoreInvalidInputs && !utils.isValid(date)) {\n      return;\n    }\n\n    onChange(date, finalString || undefined);\n  };\n\n  const rifmProps = useRifm({\n    value: innerInputValue,\n    onChange: handleChange,\n    format: rifmFormatter || formatter\n  });\n  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {\n    value: innerInputValue,\n    onChange: event => {\n      handleChange(event.currentTarget.value);\n    }\n  };\n  return _extends({\n    label,\n    disabled,\n    error: validationError,\n    inputProps: _extends({}, inputStateArgs, {\n      disabled,\n      placeholder: formatHelperText,\n      readOnly,\n      type: shouldUseMaskedInput ? 'tel' : 'text'\n    }, inputProps, {\n      onFocus: createDelegatedEventHandler(() => {\n        setIsFocused(true);\n      }, inputProps == null ? void 0 : inputProps.onFocus),\n      onBlur: createDelegatedEventHandler(() => {\n        setIsFocused(false);\n      }, inputProps == null ? void 0 : inputProps.onBlur)\n    })\n  }, TextFieldProps);\n}\nexport default useMaskedInput;"],"mappings":"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"},"metadata":{},"sourceType":"module"}