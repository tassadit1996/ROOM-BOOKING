{"ast":null,"code":"import _slicedToArray from \"C:/Users/adoud/Desktop/hotel_mern/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  var disableCloseOnSelect = props.disableCloseOnSelect,\n    onAccept = props.onAccept,\n    onChange = props.onChange,\n    value = props.value;\n  var utils = useUtils();\n  var _useOpenState = useOpenState(props),\n    isOpen = _useOpenState.isOpen,\n    setIsOpen = _useOpenState.setIsOpen;\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n  var parsedDateValue = valueManager.parseInput(utils, value);\n  var _React$useReducer = React.useReducer(function (state, action) {\n      switch (action.type) {\n        case 'reset':\n          return initDraftableDate(action.payload);\n        case 'update':\n          return _extends({}, state, {\n            draft: action.payload\n          });\n        default:\n          return state;\n      }\n    }, parsedDateValue, initDraftableDate),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    draftState = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  } // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isMobileKeyboardViewOpen = _React$useState2[0],\n    setMobileKeyboardViewOpen = _React$useState2[1];\n  var acceptDate = React.useCallback(function (acceptedDate, needClosePicker) {\n    onChange(acceptedDate);\n    if (needClosePicker) {\n      setIsOpen(false);\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  var wrapperProps = React.useMemo(function () {\n    return {\n      open: isOpen,\n      onClear: function onClear() {\n        return acceptDate(valueManager.emptyValue, true);\n      },\n      onAccept: function onAccept() {\n        return acceptDate(draftState.draft, true);\n      },\n      onDismiss: function onDismiss() {\n        return setIsOpen(false);\n      },\n      onSetToday: function onSetToday() {\n        var now = utils.date();\n        dispatch({\n          type: 'update',\n          payload: now\n        });\n        acceptDate(now, !disableCloseOnSelect);\n      }\n    };\n  }, [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, setIsOpen, valueManager.emptyValue]);\n  var pickerProps = React.useMemo(function () {\n    return {\n      date: draftState.draft,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: function toggleMobileKeyboardView() {\n        return setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen);\n      },\n      onDateChange: function onDateChange(newDate, wrapperVariant) {\n        var selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n        dispatch({\n          type: 'update',\n          payload: newDate\n        });\n        if (selectionState === 'partial') {\n          acceptDate(newDate, false);\n        }\n        if (selectionState === 'finish') {\n          var shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n          acceptDate(newDate, shouldCloseOnSelect);\n        } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n      }\n    };\n  }, [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  var inputProps = React.useMemo(function () {\n    return {\n      onChange: onChange,\n      open: isOpen,\n      rawValue: value,\n      openPicker: function openPicker() {\n        return setIsOpen(true);\n      }\n    };\n  }, [onChange, isOpen, value, setIsOpen]);\n  var pickerState = {\n    pickerProps: pickerProps,\n    inputProps: inputProps,\n    wrapperProps: wrapperProps\n  };\n  React.useDebugValue(pickerState, function () {\n    return {\n      MuiPickerState: {\n        pickerDraft: draftState,\n        other: pickerState\n      }\n    };\n  });\n  return pickerState;\n}","map":{"version":3,"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","onAccept","onChange","value","utils","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","parseInput","useReducer","state","action","type","payload","draftState","dispatch","areValuesEqual","useState","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","useMemo","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","shouldCloseOnSelect","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"sources":["C:/Users/adoud/Desktop/hotel_mern/client/node_modules/@material-ui/lab/internal/pickers/hooks/usePickerState.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  } // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => setIsOpen(false),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, setIsOpen, valueManager.emptyValue]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [onChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}